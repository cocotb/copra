from __future__ import annotations
import cocotb.handle
import cocotb.types
from typing import overload, Literal

# This file was automatically generated by copra
# It provides type stubs for your HDL design for use with cocotb

class MultiDimArray(cocotb.handle.HierarchyObject):
    in_2d_arr: cocotb.handle.LogicArrayObject
    in_2d_arr_packed: cocotb.handle.LogicArrayObject
    in_2d_vect_packed_packed: cocotb.handle.LogicArrayObject
    in_3d_arr: cocotb.handle.LogicArrayObject
    in_arr: cocotb.handle.LogicArrayObject
    in_arr_packed: cocotb.handle.LogicArrayObject
    in_arr_packed_packed: cocotb.handle.LogicArrayObject
    in_vect_packed: cocotb.handle.LogicArrayObject
    in_vect_packed_packed_packed: cocotb.handle.LogicArrayObject
    out_2d_arr: cocotb.handle.LogicArrayObject
    out_2d_arr_packed: cocotb.handle.LogicArrayObject
    out_2d_vect_packed_packed: cocotb.handle.LogicArrayObject
    out_3d_arr: cocotb.handle.LogicArrayObject
    out_arr: cocotb.handle.LogicArrayObject
    out_arr_packed: cocotb.handle.LogicArrayObject
    out_arr_packed_packed: cocotb.handle.LogicArrayObject
    out_vect_packed: cocotb.handle.LogicArrayObject
    out_vect_packed_packed_packed: cocotb.handle.LogicArrayObject
    in_2d_arr_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    in_2d_vect_packed_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    in_2d_vect_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]
    in_arr_packed_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    in_arr_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    in_arr_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    in_vect_packed_packed_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    in_vect_packed_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    in_vect_unpacked: cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]
    in_vect_unpacked_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]
    out_2d_arr_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out_2d_vect_packed_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out_2d_vect_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]
    out_arr_packed_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out_arr_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out_arr_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out_vect_packed_packed_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out_vect_packed_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    out_vect_unpacked: cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]
    out_vect_unpacked_unpacked_unpacked: cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]

    @overload
    def __getitem__(self, name: Literal['in_2d_arr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_2d_arr_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_2d_vect_packed_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_3d_arr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_arr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_arr_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_arr_packed_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_vect_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_vect_packed_packed_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_2d_arr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_2d_arr_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_2d_vect_packed_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_3d_arr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_arr']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_arr_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_arr_packed_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_vect_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['out_vect_packed_packed_packed']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['in_2d_arr_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_2d_vect_packed_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_2d_vect_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_arr_packed_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_arr_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_arr_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_vect_packed_packed_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_vect_packed_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_vect_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]: ...

    @overload
    def __getitem__(self, name: Literal['in_vect_unpacked_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_2d_arr_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_2d_vect_packed_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_2d_vect_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_arr_packed_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_arr_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_arr_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_vect_packed_packed_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_vect_packed_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_vect_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]: ...

    @overload
    def __getitem__(self, name: Literal['out_vect_unpacked_unpacked_unpacked']) -> cocotb.handle.ArrayObject[cocotb.types.Logic, cocotb.handle.LogicObject]: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...

