from __future__ import annotations
import cocotb.handle
import cocotb.types
from typing import overload, Literal

# This file was automatically generated by copra
# It provides type stubs for your HDL design for use with cocotb

class Adder(cocotb.handle.HierarchyObject):
    A: cocotb.handle.LogicArrayObject
    B: cocotb.handle.LogicArrayObject
    X: cocotb.handle.LogicArrayObject
    DATA_WIDTH: cocotb.handle.LogicArrayObject
    gen_debug_regs: cocotb.handle.HierarchyArrayObject[GenDebugRegs]

    @overload
    def __getitem__(self, name: Literal['A']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['B']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['X']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['DATA_WIDTH']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['gen_debug_regs']) -> cocotb.handle.HierarchyArrayObject[GenDebugRegs]: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...


class GenDebugRegs(cocotb.handle.HierarchyObject):
    debug_a_local: cocotb.handle.LogicArrayObject
    debug_b_local: cocotb.handle.LogicArrayObject
    debug_valid: cocotb.handle.LogicObject
    i: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal['debug_a_local']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['debug_b_local']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal['debug_valid']) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal['i']) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...

