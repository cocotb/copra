from __future__ import annotations
import cocotb.handle
import cocotb.types
from typing import overload, Literal

# This file was automatically generated by copra
# It provides type stubs for your HDL design for use with cocotb

class MatrixMultiplier(cocotb.handle.HierarchyObject):
    clk_i: cocotb.handle.LogicObject
    reset_i: cocotb.handle.LogicObject
    valid_i: cocotb.handle.LogicObject
    valid_o: cocotb.handle.LogicObject
    a_i: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    b_i: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    c_calc: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    c_o: cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]
    A_COLUMNS_B_ROWS: cocotb.handle.LogicArrayObject
    A_ROWS: cocotb.handle.LogicArrayObject
    B_COLUMNS: cocotb.handle.LogicArrayObject
    C_DATA_WIDTH: cocotb.handle.LogicArrayObject
    DATA_WIDTH: cocotb.handle.LogicArrayObject

    @overload
    def __getitem__(self, name: Literal["clk_i"]) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal["reset_i"]) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal["valid_i"]) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal["valid_o"]) -> cocotb.handle.LogicObject: ...

    @overload
    def __getitem__(self, name: Literal["a_i"]) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal["b_i"]) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal["c_calc"]) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal["c_o"]) -> cocotb.handle.ArrayObject[cocotb.types.LogicArray, cocotb.handle.LogicArrayObject]: ...

    @overload
    def __getitem__(self, name: Literal["A_COLUMNS_B_ROWS"]) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal["A_ROWS"]) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal["B_COLUMNS"]) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal["C_DATA_WIDTH"]) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: Literal["DATA_WIDTH"]) -> cocotb.handle.LogicArrayObject: ...

    @overload
    def __getitem__(self, name: str) -> cocotb.handle.SimHandleBase: ...

